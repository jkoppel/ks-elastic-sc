{"title":"Pool Deployment Mechanics in KyberSwap v2","id":"14+YFwMHu3LjsJJVn79b5bcG99laWD5sTYTJZFvTfoQ=","steps":[{"type":"textOnly","description":"In KyberSwap v2, pool deployment is a crucial process that creates new liquidity pools for token pairs. Let's explore how this works, focusing on the key components and their interactions.","title":"","id":"2486"},{"type":"highlight","description":"The IFactory interface defines the createPool function, which is the entry point for pool creation. This function takes two token addresses and a swap fee as parameters.","file":"contracts/interfaces/IFactory.sol","highlight":[{"start":121,"end":135}],"title":"","id":"2487"},{"type":"highlight","description":"The Factory contract implements the createPool function. This is where the actual pool deployment process begins. Note how it checks for valid inputs and ensures the pool doesn't already exist.","file":"contracts/Factory.sol","highlight":[{"start":87,"end":111}],"title":"","id":"2488"},{"type":"revealFiles","files":["contracts/libraries/BaseSplitCodeFactory.sol"],"description":"BaseSplitCodeFactory is a crucial component for deploying large contracts, such as complex pool contracts, whose creation code exceeds 24kB. Let's examine its declaration and purpose.","title":"","id":"2520"},{"type":"highlight","description":"BaseSplitCodeFactory stores the contract's creation code in two separate addresses, allowing it to support contracts with creation code of up to 48kB. This is achieved using inline assembly and `extcodecopy`. Let's examine the key variables used in this process.","file":"contracts/libraries/BaseSplitCodeFactory.sol","highlight":[{"start":26,"end":36}],"title":"","id":"2521"},{"type":"highlight","description":"The CodeDeployer library is used within BaseSplitCodeFactory to actually deploy the contract. It uses a minimal constructor that copies and returns appended data as the contract's code.","file":"contracts/libraries/CodeDeployer.sol","highlight":[{"start":58,"end":80}],"title":"","id":"2490"},{"type":"highlight","description":"After creating the pool contract, the Factory initializes it and stores its address. The pool's initial state is set using the parameters struct, which includes crucial information like factory address, token addresses, and swap fee. The _create function deploys the pool using the encoded parameters, ensuring a consistent initial state across all pools.","file":"contracts/Factory.sol","highlight":[{"start":99,"end":110}],"title":"","id":"2491"},{"type":"highlight","description":"After a pool is deployed, it can be accessed and used by other contracts in the system. The IPoolActions interface provides functions for executing swaps and managing liquidity, which interact with deployed pools. This demonstrates how the pool becomes an integral part of the broader DeFi ecosystem post-deployment.","file":"contracts/interfaces/pool/IPoolActions.sol","highlight":[{"start":10,"end":30}],"title":"","id":"2492"},{"type":"textOnly","description":"To summarize, pool deployment in KyberSwap v2 involves several key steps: 1) The createPool function is called on the Factory contract. 2) The Factory uses BaseSplitCodeFactory and CodeDeployer to handle the deployment of large contracts. 3) The pool address is computed deterministically and stored. This process ensures efficient and consistent creation of new liquidity pools.","title":"","id":"2493"}]}