{"title":"Tick-Crossing Mechanics in KyberSwap v2","id":"HFqRb152D5UUX2sNVFNVQwoFJpRwriZvoFMcWT+kUgE=","steps":[{"type":"textOnly","description":"In Automated Market Maker (AMM) pools, tick-crossing is a crucial mechanism that allows for efficient price discovery and liquidity provision across a wide range of prices. We'll explore how this works in the KyberSwap v2 implementation, focusing on the key components and their interactions during a swap that crosses price ticks.","title":"","id":"2456"},{"type":"textOnly","description":"Tick-crossing is a crucial concept in concentrated liquidity AMMs like KyberSwap. It occurs when a swap causes the price to move beyond the current tick and into a new tick range. This process involves updating liquidity, fees, and other state variables. Let's examine how KyberSwap implements tick-crossing in the Pool contract.","title":"","id":"2508"},{"type":"highlight","description":"The swap function is where tick-crossing potentially occurs. It uses a while loop to continue swapping until the specified amount is satisfied or the price limit is reached. Let's focus on the relevant parts of this function:","file":"contracts/Pool.sol","highlight":[{"start":328,"end":371}],"title":"","id":"2509"},{"type":"highlight","description":"Inside the swap loop, the code checks if the price has reached the next tick. If so, it updates the current tick and prepares to cross to the next tick:","file":"contracts/Pool.sol","highlight":[{"start":412,"end":422}],"title":"","id":"2510"},{"type":"highlight","description":"When crossing a tick, the _updateLiquidityAndCrossTick function is called to update the liquidity and handle the tick crossing:","file":"contracts/Pool.sol","highlight":[{"start":457,"end":463}],"title":"","id":"2511"},{"type":"highlight","description":"After the swap loop, the pool data is updated with the new values, including the new tick and liquidity:","file":"contracts/Pool.sol","highlight":[{"start":479,"end":485}],"title":"","id":"2512"},{"type":"highlight","description":"Here's the swap function, which is where the tick-crossing logic is initiated. Note how it calls _swapWithinTick in a loop, potentially crossing multiple ticks.","file":"contracts/Pool.sol","highlight":[{"start":236,"end":301}],"title":"","id":"2458"},{"type":"highlight","description":"The SwapMath library's computeSwapStep function is crucial for tick-crossing logic. It calculates the swap amounts and determines if a tick boundary is reached or crossed. Here's how it works:\n\n1. It first calculates the 'usedAmount' using calcReachAmount, which determines how much of the input is needed to reach the next tick.\n2. If the calculated amount exceeds the available input (for exact input swaps) or is insufficient (for exact output swaps), it adjusts the swap to use all available input or meet the desired output.\n3. The function then calculates 'deltaL', which represents the change in liquidity due to fees.\n4. Finally, it computes the 'nextSqrtP', which is the new square root price after the swap.\n\nIf nextSqrtP equals targetSqrtP, it means a tick has been crossed. The swap function in the Pool contract uses this information to update the pool state and cross ticks as necessary.","file":"contracts/libraries/SwapMath.sol","highlight":[{"start":28,"end":98}],"title":"","id":"2459"},{"type":"revealFiles","files":["contracts/libraries/SwapMath.sol"],"description":"The SwapMath library contains the core mathematical functions used in swap calculations, including tick-crossing determination.","title":"","id":"2460"},{"type":"highlight","description":"The computeSwapStep function calculates the swap amounts and determines if a tick boundary is reached or crossed.","file":"contracts/libraries/SwapMath.sol","highlight":[{"start":20,"end":85}],"title":"","id":"2461"},{"type":"revealFiles","files":["contracts/libraries/TickMath.sol"],"description":"The TickMath library provides functions for converting between tick indices and square root prices, which is crucial for tick-crossing logic.","title":"","id":"2462"},{"type":"revealFiles","files":["contracts/PoolTicksState.sol"],"description":"The PoolTicksState contract handles the updating of tick states when ticks are crossed during a swap.","title":"","id":"2463"},{"type":"highlight","description":"The _updateLiquidityAndCrossTick function is crucial for managing liquidity changes when crossing a tick. It performs these key operations:\n\n1. Updates the fee growth and seconds per liquidity for the crossed tick.\n2. Calculates the new liquidity after crossing the tick.\n3. Determines the next tick to be processed.\n\nThis function is called during a swap when the price moves across a tick boundary, ensuring that the pool's state is correctly updated to reflect the new active price range.","file":"contracts/PoolTicksState.sol","highlight":[{"start":77,"end":103}],"title":"","id":"2464"},{"type":"revealFiles","files":["contracts/libraries/Linkedlist.sol"],"description":"The Linkedlist library provides functions for managing the ordered list of initialized ticks, which is crucial for efficient tick-crossing.","title":"","id":"2465"},{"type":"textOnly","description":"Let's recap the key components involved in tick-crossing in KyberSwap v2. The process involves calculations in the SwapMath library, state updates in the PoolTicksState contract, and management of initialized ticks using the Linkedlist library. Now, we'll examine a specific example of a swap that crosses a tick to see how these components interact.","title":"","id":"2513"},{"type":"highlight","description":"Here's the main swap function in the Pool contract. Pay attention to the loop where tick-crossing occurs:","file":"contracts/Pool.sol","highlight":[{"start":436,"end":479}],"title":"","id":"2514"},{"type":"highlight","description":"Let's zoom in on the part of the swap loop that handles tick-crossing:","file":"contracts/Pool.sol","highlight":[{"start":456,"end":471}],"title":"","id":"2515"},{"type":"textOnly","description":"In this code snippet, we can see the tick-crossing process in action:\n\n1. The `state.tick` is updated to the next initialized tick (`state.nextTick`).\n2. The `cross` function from PoolTicksState is called to update the state when crossing a tick.\n3. The next initialized tick is fetched using the Linkedlist library.\n4. The liquidity is updated based on the crossed tick's net liquidity.\n\nThis process continues until the swap is completed or there's not enough liquidity to fulfill the swap.","title":"","id":"2516"},{"type":"textOnly","description":"To summarize, tick-crossing in KyberSwap v2 is a crucial mechanism that allows for efficient price discovery and liquidity provision across a wide range of prices. The process involves:\n\n1. Calculating swap amounts and identifying when a tick is crossed (SwapMath library)\n2. Updating the pool state when crossing ticks (PoolTicksState contract)\n3. Managing the list of initialized ticks (Linkedlist library)\n4. Adjusting liquidity based on crossed ticks\n\nThis implementation enables the AMM system to handle large price movements efficiently while maintaining accurate pricing and liquidity distribution.","title":"","id":"2517"}]}