{"title":"Position Management with Anti-Snip Protection","id":"2dhB2WJDn2hWSx79kKf+Ulr/BIEufH+6QdZjImMckBw=","steps":[{"type":"textOnly","description":"In this tour, we'll explore how positions are managed in this AMM system. Positions represent liquidity provided by users, which are tokenized as NFTs. We'll focus on the AntiSnipAttackPositionManager contract, which extends the base position management functionality with anti-sniping attack protection.","title":"","id":"2475"},{"type":"revealFiles","files":["contracts/periphery/AntiSnipAttackPositionManager.sol"],"description":"Let's start by examining the AntiSnipAttackPositionManager contract. This contract is responsible for managing liquidity positions with added protection against sniping attacks.","title":"","id":"2518"},{"type":"highlight","description":"Now, let's look at how positions are stored and accessed. The Position struct is defined in the BasePositionManager contract, which AntiSnipAttackPositionManager inherits from. Here's how positions are stored and accessed:","file":"contracts/periphery/AntiSnipAttackPositionManager.sol","highlight":[{"start":47,"end":48}],"title":"","id":"2519"},{"type":"highlight","description":"The contract uses a mapping to store anti-snip attack data for each position. This data structure is crucial for implementing the protection mechanism.","file":"contracts/periphery/AntiSnipAttackPositionManager.sol","highlight":[{"start":12,"end":12}],"title":"","id":"2477"},{"type":"highlight","description":"The mint function is used to create new liquidity positions. After minting the position, it initializes the anti-snip attack data for the new token.","file":"contracts/periphery/AntiSnipAttackPositionManager.sol","highlight":[{"start":20,"end":33}],"title":"","id":"2478"},{"type":"highlight","description":"The addLiquidity function increases liquidity in existing positions. It interacts with the pool contract to add liquidity and update fee data:\n\n1. Retrieves position and pool info\n2. Calls _addLiquidity to interact with the pool contract, adding liquidity and getting updated fee data\n3. Updates anti-snip attack data if fees have changed:\n   - Calculates fee growth difference\n   - Calls AntiSnipAttack.update to compute claimable rewards and update vesting data\n   - Updates position's owed rewards and fee growth tracking\n4. Increases position's liquidity\n5. Emits AddLiquidity event with updated data\n\nThis process ensures accurate tracking of liquidity, fees, and anti-snip attack protection for each position.","file":"contracts/periphery/AntiSnipAttackPositionManager.sol","highlight":[{"start":35,"end":92}],"title":"","id":"2479"},{"type":"highlight","description":"The removeLiquidity function demonstrates crucial error handling and precise calculations for managing position liquidity. Note the following key aspects:\n\n1. Initial checks: Ensures sufficient liquidity and authorized access.\n2. Liquidity burning: Calls the pool's burn function with exact parameters.\n3. Return amount validation: Verifies minimum return amounts are met.\n4. Fee calculations: Updates anti-snip attack data and calculates claimable/burnable fees.\n5. Position updates: Adjusts liquidity and fee data for the position.\n\nPay attention to how each step carefully manages the position's state and handles potential edge cases.","file":"contracts/periphery/AntiSnipAttackPositionManager.sol","highlight":[{"start":94,"end":143}],"title":"","id":"2480"},{"type":"highlight","description":"The syncFeeGrowth function allows manual synchronization of fee growth for a given position, updating the anti-snip attack data accordingly.","file":"contracts/periphery/AntiSnipAttackPositionManager.sol","highlight":[{"start":145,"end":181}],"title":"","id":"2481"},{"type":"revealFiles","files":["contracts/periphery/libraries/AntiSnipAttack.sol"],"description":"The AntiSnipAttack library implements the core logic for preventing sniping attacks, a key aspect of position management in this AMM. It uses a vesting mechanism to discourage short-term liquidity provision and protect long-term liquidity providers. Let's examine its key components:\n\n1. The `Data` struct (lines 17-26) stores critical information for each position, including timestamps and locked fee amounts.\n2. The `update` function (lines 49-137) is the core of the mechanism, calculating claimable and burnable fees based on liquidity changes and time elapsed.\n3. The `calcFeeProportions` function (lines 139-150) determines the proportion of fees that can be claimed or remain locked.\n\nThese components work together to implement a time-based vesting system for collected fees, effectively managing positions to align incentives with long-term liquidity provision.","title":"","id":"2482"},{"type":"highlight","description":"The Data struct stores important information for each position, including timestamps and locked fee amounts.","file":"contracts/periphery/libraries/AntiSnipAttack.sol","highlight":[{"start":17,"end":26}],"title":"","id":"2483"},{"type":"highlight","description":"The update function is the core of the anti-snip attack mechanism. It calculates claimable and burnable fees, and adjusts lock times based on liquidity changes.","file":"contracts/periphery/libraries/AntiSnipAttack.sol","highlight":[{"start":49,"end":137}],"title":"","id":"2484"},{"type":"textOnly","description":"The position management system in this AMM is designed with several key features:\n1. Positions are represented as NFTs, allowing for easy transfer and management.\n2. The AntiSnipAttackPositionManager extends basic position management with protection against sniping attacks.\n3. The system carefully tracks liquidity changes, fee growth, and implements a vesting mechanism for collected fees.\n4. Users can mint new positions, add or remove liquidity, and manually sync fee growth when needed.\n5. The anti-snip attack mechanism helps protect long-term liquidity providers by discouraging short-term exploitative behavior.","title":"","id":"2485"}]}